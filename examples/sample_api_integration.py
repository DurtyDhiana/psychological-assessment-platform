#!/usr/bin/env python3\n\"\"\"\nSample API Integration\nExample code for integrating with the GPT psychological assessment system\n\"\"\"\n\nimport requests\nimport json\nfrom typing import Dict, List, Any, Optional\nfrom datetime import datetime\n\nclass AssessmentAPIClient:\n    \"\"\"Client for interacting with the psychological assessment API\"\"\"\n    \n    def __init__(self, base_url: str, api_key: str):\n        self.base_url = base_url.rstrip('/')\n        self.api_key = api_key\n        self.session = requests.Session()\n        self.session.headers.update({\n            'Authorization': f'Bearer {api_key}',\n            'Content-Type': 'application/json'\n        })\n    \n    def get_available_assessments(self) -> List[Dict[str, Any]]:\n        \"\"\"Retrieve list of available assessments\"\"\"\n        response = self.session.get(f'{self.base_url}/api/v1/assessments')\n        response.raise_for_status()\n        return response.json()['assessments']\n    \n    def start_assessment(self, assessment_id: str, user_id: str) -> Dict[str, Any]:\n        \"\"\"Start a new assessment session\"\"\"\n        payload = {\n            'assessmentId': assessment_id,\n            'userId': user_id,\n            'timestamp': datetime.now().isoformat()\n        }\n        \n        response = self.session.post(\n            f'{self.base_url}/api/v1/assessments/start',\n            json=payload\n        )\n        response.raise_for_status()\n        return response.json()\n    \n    def get_next_question(self, session_id: str) -> Dict[str, Any]:\n        \"\"\"Get the next question in an assessment\"\"\"\n        response = self.session.get(\n            f'{self.base_url}/api/v1/assessments/{session_id}/next-question'\n        )\n        response.raise_for_status()\n        return response.json()\n    \n    def submit_answer(self, session_id: str, question_id: str, answer: Any) -> Dict[str, Any]:\n        \"\"\"Submit an answer to a question\"\"\"\n        payload = {\n            'questionId': question_id,\n            'answer': answer,\n            'timestamp': datetime.now().isoformat()\n        }\n        \n        response = self.session.post(\n            f'{self.base_url}/api/v1/assessments/{session_id}/answer',\n            json=payload\n        )\n        response.raise_for_status()\n        return response.json()\n    \n    def complete_assessment(self, session_id: str) -> Dict[str, Any]:\n        \"\"\"Complete an assessment and get results\"\"\"\n        response = self.session.post(\n            f'{self.base_url}/api/v1/assessments/{session_id}/complete'\n        )\n        response.raise_for_status()\n        return response.json()\n    \n    def get_assessment_results(self, session_id: str) -> Dict[str, Any]:\n        \"\"\"Retrieve detailed assessment results\"\"\"\n        response = self.session.get(\n            f'{self.base_url}/api/v1/results/{session_id}'\n        )\n        response.raise_for_status()\n        return response.json()\n    \n    def start_simulation(self, simulation_id: str, user_id: str, \n                        assessment_results: Optional[Dict] = None) -> Dict[str, Any]:\n        \"\"\"Start an interactive simulation\"\"\"\n        payload = {\n            'simulationId': simulation_id,\n            'userId': user_id,\n            'assessmentResults': assessment_results,\n            'timestamp': datetime.now().isoformat()\n        }\n        \n        response = self.session.post(\n            f'{self.base_url}/api/v1/simulations/start',\n            json=payload\n        )\n        response.raise_for_status()\n        return response.json()\n    \n    def make_simulation_choice(self, session_id: str, choice_id: str) -> Dict[str, Any]:\n        \"\"\"Make a choice in a simulation scenario\"\"\"\n        payload = {\n            'choiceId': choice_id,\n            'timestamp': datetime.now().isoformat()\n        }\n        \n        response = self.session.post(\n            f'{self.base_url}/api/v1/simulations/{session_id}/choice',\n            json=payload\n        )\n        response.raise_for_status()\n        return response.json()\n    \n    def export_user_data(self, user_id: str, format: str = 'json') -> bytes:\n        \"\"\"Export user's assessment data\"\"\"\n        response = self.session.get(\n            f'{self.base_url}/api/v1/users/{user_id}/export',\n            params={'format': format}\n        )\n        response.raise_for_status()\n        return response.content\n\n# Example usage functions\ndef example_complete_assessment_flow():\n    \"\"\"Example of a complete assessment workflow\"\"\"\n    \n    # Initialize client\n    client = AssessmentAPIClient(\n        base_url='https://api.yourapp.com',\n        api_key='your-api-key-here'\n    )\n    \n    user_id = 'user123'\n    \n    try:\n        # 1. Get available assessments\n        assessments = client.get_available_assessments()\n        print(f\"Available assessments: {len(assessments)}\")\n        \n        # 2. Start an assessment (using first available)\n        assessment_id = assessments[0]['id']\n        session = client.start_assessment(assessment_id, user_id)\n        session_id = session['sessionId']\n        print(f\"Started assessment session: {session_id}\")\n        \n        # 3. Complete the assessment\n        while True:\n            # Get next question\n            question_data = client.get_next_question(session_id)\n            \n            if question_data.get('completed', False):\n                print(\"Assessment completed!\")\n                break\n            \n            question = question_data['question']\n            print(f\"Question: {question['text']}\")\n            \n            # Simulate user answer (in real app, this would come from UI)\n            if question['type'] == 'likert':\n                answer = 4  # Example: \"Agree\"\n            elif question['type'] == 'multiple_choice':\n                answer = question['options'][0]['value']\n            else:\n                answer = \"Sample answer\"\n            \n            # Submit answer\n            result = client.submit_answer(session_id, question['id'], answer)\n            print(f\"Answer submitted: {result['status']}\")\n        \n        # 4. Get final results\n        results = client.get_assessment_results(session_id)\n        print(f\"Assessment results: {results['summary']}\")\n        \n        # 5. Start a simulation if available\n        if results.get('simulationRecommended'):\n            simulation_id = results['recommendedSimulation']\n            sim_session = client.start_simulation(\n                simulation_id, \n                user_id, \n                results\n            )\n            print(f\"Started simulation: {sim_session['sessionId']}\")\n        \n    except requests.exceptions.RequestException as e:\n        print(f\"API Error: {e}\")\n    except Exception as e:\n        print(f\"Unexpected error: {e}\")\n\ndef example_batch_assessment_analysis():\n    \"\"\"Example of analyzing multiple users' assessment data\"\"\"\n    \n    client = AssessmentAPIClient(\n        base_url='https://api.yourapp.com',\n        api_key='your-api-key-here'\n    )\n    \n    user_ids = ['user1', 'user2', 'user3']  # Example user IDs\n    \n    # Collect results from multiple users\n    all_results = []\n    for user_id in user_ids:\n        try:\n            # Export user data\n            user_data = client.export_user_data(user_id, format='json')\n            user_results = json.loads(user_data.decode('utf-8'))\n            all_results.append(user_results)\n        except Exception as e:\n            print(f\"Error processing user {user_id}: {e}\")\n    \n    # Analyze patterns (example analysis)\n    if all_results:\n        print(f\"Analyzed data from {len(all_results)} users\")\n        \n        # Example: Calculate average scores\n        trait_scores = {}\n        for result in all_results:\n            for assessment in result.get('assessments', []):\n                for trait, score in assessment.get('traitScores', {}).items():\n                    if trait not in trait_scores:\n                        trait_scores[trait] = []\n                    trait_scores[trait].append(score)\n        \n        # Calculate averages\n        trait_averages = {\n            trait: sum(scores) / len(scores) \n            for trait, scores in trait_scores.items()\n        }\n        \n        print(\"Average trait scores across users:\")\n        for trait, avg_score in trait_averages.items():\n            print(f\"  {trait}: {avg_score:.2f}\")\n\n# Frontend integration example (JavaScript/React)\nfrontend_integration_example = '''\n// React component example for assessment integration\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst AssessmentComponent = ({ userId, assessmentId }) => {\n  const [session, setSession] = useState(null);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [answers, setAnswers] = useState({});\n  const [results, setResults] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  const apiClient = axios.create({\n    baseURL: 'https://api.yourapp.com/api/v1',\n    headers: {\n      'Authorization': `Bearer ${process.env.REACT_APP_API_KEY}`,\n      'Content-Type': 'application/json'\n    }\n  });\n\n  useEffect(() => {\n    startAssessment();\n  }, [assessmentId, userId]);\n\n  const startAssessment = async () => {\n    setLoading(true);\n    try {\n      const response = await apiClient.post('/assessments/start', {\n        assessmentId,\n        userId,\n        timestamp: new Date().toISOString()\n      });\n      \n      setSession(response.data);\n      await getNextQuestion(response.data.sessionId);\n    } catch (error) {\n      console.error('Error starting assessment:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getNextQuestion = async (sessionId) => {\n    try {\n      const response = await apiClient.get(`/assessments/${sessionId}/next-question`);\n      \n      if (response.data.completed) {\n        await completeAssessment(sessionId);\n      } else {\n        setCurrentQuestion(response.data.question);\n      }\n    } catch (error) {\n      console.error('Error getting next question:', error);\n    }\n  };\n\n  const submitAnswer = async (questionId, answer) => {\n    setLoading(true);\n    try {\n      await apiClient.post(`/assessments/${session.sessionId}/answer`, {\n        questionId,\n        answer,\n        timestamp: new Date().toISOString()\n      });\n      \n      setAnswers(prev => ({ ...prev, [questionId]: answer }));\n      await getNextQuestion(session.sessionId);\n    } catch (error) {\n      console.error('Error submitting answer:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const completeAssessment = async (sessionId) => {\n    try {\n      const response = await apiClient.get(`/results/${sessionId}`);\n      setResults(response.data);\n      setCurrentQuestion(null);\n    } catch (error) {\n      console.error('Error completing assessment:', error);\n    }\n  };\n\n  if (loading) return <div>Loading...</div>;\n  if (results) return <AssessmentResults results={results} />;\n  if (!currentQuestion) return <div>Initializing assessment...</div>;\n\n  return (\n    <div className=\"assessment-container\">\n      <h2>{currentQuestion.text}</h2>\n      \n      {currentQuestion.type === 'likert' && (\n        <LikertScale \n          options={currentQuestion.options}\n          onAnswer={(answer) => submitAnswer(currentQuestion.id, answer)}\n        />\n      )}\n      \n      {currentQuestion.type === 'multiple_choice' && (\n        <MultipleChoice\n          options={currentQuestion.options}\n          onAnswer={(answer) => submitAnswer(currentQuestion.id, answer)}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default AssessmentComponent;\n'''\n\nif __name__ == \"__main__\":\n    print(\"GPT Assessment API Integration Examples\")\n    print(\"=====================================\")\n    print()\n    print(\"1. Complete Assessment Flow Example:\")\n    example_complete_assessment_flow()\n    print()\n    print(\"2. Batch Analysis Example:\")\n    example_batch_assessment_analysis()\n    print()\n    print(\"3. Frontend Integration Example (React):\")\n    print(frontend_integration_example)\n