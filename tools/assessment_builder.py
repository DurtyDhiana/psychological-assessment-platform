#!/usr/bin/env python3\n\"\"\"\nGPT Model Assessment Builder\nProgrammatically expand and manage psychological assessments in the JSON blueprint\n\"\"\"\n\nimport json\nfrom typing import List, Dict, Any, Optional\nfrom datetime import datetime\n\nclass AssessmentBuilder:\n    def __init__(self, blueprint_path: str):\n        \"\"\"Initialize with existing blueprint JSON file\"\"\"\n        with open(blueprint_path, 'r') as f:\n            self.blueprint = json.load(f)\n        \n        # Ensure assessments section exists\n        if \"assessments\" not in self.blueprint[\"modelBlueprint\"]:\n            self.blueprint[\"modelBlueprint\"][\"assessments\"] = {\n                \"available\": [],\n                \"categories\": {\n                    \"personality\": [],\n                    \"cognitive\": [],\n                    \"emotional\": [],\n                    \"behavioral\": [],\n                    \"career\": [],\n                    \"relationship\": []\n                }\n            }\n    \n    def add_assessment(self, \n                      quiz_id: str,\n                      title: str, \n                      description: str,\n                      category: str,\n                      traits_measured: List[str],\n                      question_count: int,\n                      estimated_duration: str,\n                      simulation_supported: bool = False,\n                      adaptive_logic: bool = True,\n                      psychological_framework: str = None) -> Dict[str, Any]:\n        \"\"\"Add a new assessment to the blueprint\"\"\"\n        \n        new_assessment = {\n            \"id\": quiz_id,\n            \"title\": title,\n            \"description\": description,\n            \"category\": category,\n            \"metadata\": {\n                \"traitsMeasured\": traits_measured,\n                \"questionCount\": question_count,\n                \"estimatedDuration\": estimated_duration,\n                \"psychologicalFramework\": psychological_framework,\n                \"createdDate\": datetime.now().isoformat(),\n                \"version\": \"1.0\"\n            },\n            \"features\": {\n                \"adaptiveLogic\": adaptive_logic,\n                \"simulationSupported\": simulation_supported,\n                \"progressTracking\": True,\n                \"exportable\": True\n            },\n            \"scoring\": {\n                \"method\": \"weighted_average\",\n                \"scaleType\": \"1-7_likert\",\n                \"resultFormat\": \"percentage_with_narrative\"\n            }\n        }\n        \n        # Add to main assessments list\n        self.blueprint[\"modelBlueprint\"][\"assessments\"][\"available\"].append(new_assessment)\n        \n        # Add to category\n        if category in self.blueprint[\"modelBlueprint\"][\"assessments\"][\"categories\"]:\n            self.blueprint[\"modelBlueprint\"][\"assessments\"][\"categories\"][category].append(quiz_id)\n        \n        return new_assessment\n    \n    def add_simulation_scenario(self,\n                               scenario_id: str,\n                               title: str,\n                               description: str,\n                               related_assessments: List[str],\n                               difficulty_level: str,\n                               interaction_type: str) -> Dict[str, Any]:\n        \"\"\"Add interactive simulation scenarios\"\"\"\n        \n        if \"simulations\" not in self.blueprint[\"modelBlueprint\"]:\n            self.blueprint[\"modelBlueprint\"][\"simulations\"] = []\n        \n        new_simulation = {\n            \"id\": scenario_id,\n            \"title\": title,\n            \"description\": description,\n            \"relatedAssessments\": related_assessments,\n            \"configuration\": {\n                \"difficultyLevel\": difficulty_level,  # \"beginner\", \"intermediate\", \"advanced\"\n                \"interactionType\": interaction_type,  # \"dialogue\", \"decision_tree\", \"role_play\"\n                \"estimatedDuration\": \"10-15 minutes\",\n                \"adaptiveResponses\": True\n            },\n            \"outcomes\": {\n                \"skillsPracticed\": [],\n                \"insightsGenerated\": [],\n                \"followUpRecommendations\": True\n            }\n        }\n        \n        self.blueprint[\"modelBlueprint\"][\"simulations\"].append(new_simulation)\n        return new_simulation\n    \n    def save_blueprint(self, output_path: str):\n        \"\"\"Save the updated blueprint to file\"\"\"\n        with open(output_path, 'w') as f:\n            json.dump(self.blueprint, f, indent=2)\n        print(f\"Updated blueprint saved to: {output_path}\")\n    \n    def get_assessment_summary(self) -> Dict[str, Any]:\n        \"\"\"Get summary statistics of current assessments\"\"\"\n        assessments = self.blueprint[\"modelBlueprint\"][\"assessments\"][\"available\"]\n        categories = self.blueprint[\"modelBlueprint\"][\"assessments\"][\"categories\"]\n        \n        return {\n            \"totalAssessments\": len(assessments),\n            \"categoryCounts\": {cat: len(ids) for cat, ids in categories.items()},\n            \"simulationEnabled\": len([a for a in assessments if a[\"features\"][\"simulationSupported\"]]),\n            \"averageQuestions\": sum(a[\"metadata\"][\"questionCount\"] for a in assessments) / len(assessments) if assessments else 0\n        }\n\n# Usage Example\nif __name__ == \"__main__\":\n    # Initialize builder with comprehensive blueprint\n    builder = AssessmentBuilder(\"../blueprints/comprehensive_assessment_suite.json\")\n    \n    # Print summary\n    summary = builder.get_assessment_summary()\n    print(\"Assessment Summary:\")\n    print(f\"Total Assessments: {summary['totalAssessments']}\")\n    print(f\"Simulation-Enabled: {summary['simulationEnabled']}\")\n    print(f\"Average Questions: {summary['averageQuestions']:.1f}\")\n    print(\"Category Distribution:\", summary['categoryCounts'])\n